# 全局规则
1. 输出的markdown文档中，代码块需要缩进2格后再输出，例如
<markdown样例>
代码：
    ```dart
    print('Hello, World!');
    ```
</markdown样例>
2. 不需要运行`flutter`相关的命令

# 文档输出要求
# 技术设计文档要求
## 要求
1. 文件名：`Design-xxx.md`
2. ui页面上每一步都要详细说明如何进行，包括点击交互，响应，提示等
3. 明确指定逻辑操作和ui元素的关系
4. 清晰简洁：使用简洁明了的语言，避免使用过于专业或晦涩的术语。
5. 一致性：保持文档风格一致，包括排版、术语、命名规范等。
6. 语言：中文。

## 目录
```markdown
### 1. 目的

*   明确设计文档的目标读者（开发人员、测试人员、项目经理等）。
*   清晰阐述设计文档所涵盖的范围（整体架构、模块设计、UI/UX 设计等）。
*   强调设计文档对于项目成功的重要性（指导开发、保证质量、促进沟通等）。

### 2. 文档结构
*   **概述**：
    *   **项目背景**：简要介绍项目产生的背景、要解决的问题、以及目标用户群体。
    *   **项目目标**：明确项目要达成的具体目标，例如功能、性能、用户体验等。
    *   **技术选型**：列出项目采用的关键技术，如 Flutter 版本、状态管理方案、数据库等，并说明选择理由。

*   **详细设计**：
    *   **功能模块**：
        *   **模块划分**：将应用划分为若干模块，描述每个模块的功能和职责。
        *   **模块交互**：说明模块之间如何进行交互和数据传递。
        *   **流程图**：对于复杂的业务流程，使用mermaid流程图清晰展示。
    *   **异常处理**：
        *   **异常处理流程**：对于异常情况，需要有异常处理流程，并给出异常处理方案。
        *   **异常处理流程图**：对于异常处理流程，使用mermaid流程图清晰展示。
    *   **数据设计**：
        *   **数据模型**：描述应用中涉及的数据结构，包括字段、类型、关系等。
        *   **数据库设计**：如果使用数据库，说明数据库的类型、表结构、索引等。
        *   **数据流**：描述数据在应用中的流动路径和处理过程。
    *   **类设计**：
        *   **类结构**：描述类的如何设计，结构功能。
        *   **实现方式**：如何实现，需要以面向接口编程、依赖注入、组合优于继承等进行设计。

*   **其他**：
    *   **安全性设计**：如果应用涉及敏感数据，说明安全措施，如数据加密、访问控制等。
    *   **性能优化**：说明如何进行性能优化，如减少资源消耗、提高响应速度等。
    *   **单元测试**：概述测试策略和计划，测试用例。
    *   **风险评估**：评估项目可能存在的风险，并提出应对措施。


# 代码实现
1. 严格按照技术设计文档实现，不允许私自添加功能
2. 每次代码实现都要能够运行看到效果
3. `ui.html`仅供参考，每次实现只专注US指定的部分，而非UI的全体部分
```